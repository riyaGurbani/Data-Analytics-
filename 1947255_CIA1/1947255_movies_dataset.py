# -*- coding: utf-8 -*-
"""1947255_movies_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bh7N8EFHFHCWnIPz_7274K0QyCqByfrS
"""

from google.colab import files
uploaded=files.upload()

"""movies_metadata.csv: The main Movies Metadata file. Contains information on 45,000 movies featured in the Full MovieLens dataset. Features include posters, backdrops, budget, revenue, release dates, languages, production countries and companies."""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
#sets the backend of matplotlib to the inline backend
# %matplotlib inline
warnings.filterwarnings('ignore')
import statsmodels.api as sm

# Loading the data
df = pd.read_csv("movies_dataset.csv", encoding= 'unicode_escape')
df.head(5)

print(f'Number of rows: {df.shape[0]}')
print(f'Number of columns: {df.shape[1]}')

#summary of a DataFrame
df.info()

#summary statistic of the numerical variables
df.describe()

#checking datatype for columns
df.dtypes

"""**DATA RELATION**"""

#getting independent values from dataset
x = df.iloc[:, :-1].values
print(x)

#getting dependent values from dataset
y = df.iloc[:,-1].values
print(y)

"""**DATA PREPROCESSING**"""

#checking for missing values
df.isnull()

#count for missing values
print(df.isnull().sum())

# After dropping the values
print(df.isnull().sum())

#detecting outliers for budget
sns.boxplot(x = df['runtime'])

sns.boxplot(x = df['revenue'])

sns.boxplot(x = df['vote_count'])

#Transformation - Binning
data = df['vote_count']
data = data[:30] #taking only first 30 data items
data=np.sort(data)
print('Data:')
print(data)
print('')

#create three different matrices having 10 rows and 3 columns
b1=np.zeros((10,3)) 
b2=np.zeros((10,3)) 
b3=np.zeros((10,3)) 

#binning by mean
for i in range (0,30,3): 
  k=int(i/3) 
  mean=(data[i] + data[i+1] + data[i+2] )/3
  for j in range(3): 
    b1[k,j]=mean 
print("----Binning by mean:---- \n",b1)
print('')

#binning by median
for i in range (0,30,3): 
  k=int(i/3) 
  for j in range (3): 
    b2[k,j]=data[i+1] 
print("----Binning by median:---- \n",b2)
print('')

#binning by boundary
for i in range (0,30,3): 
  k=int(i/3) 
  for j in range (3): 
    if (data[i+j]-data[i]) < (data[i+2]-data[i+j]): 
      b3[k,j]=data[i] 
    else: 
      b3[k,j]=data[i+2]   
print("----Binning by boundary:----\n",b3)

#Transformation - Normalization
import statistics

from sklearn import preprocessing

#min-max normalization
def minMaxNor(num,list):
    minNum=int(input("Enter Minimun Setting:\t"))
    maxNum = int(input("Enter Maximum Setting:\t"))
    ans=round(((num-min(list))/(max(list)-min(list))*(maxNum-minNum))+minNum,2)
    return ans

data = df['vote_count']
data = data[:10] #taking only first 10 data items
data=np.sort(data)
print(data)

#z-score normalization
def zNor (num,mean,stdDv):
    return round((num-mean)/stdDv,2)

#modified z-score normalization
def zNorMAD (num,mean,abMeanDiv):
    return round((num-mean)/abMeanDiv,2)

#decimal-scaling normalization
def decNor(num,maxNum):
    digit=len(str(maxNum))
    div=pow(10,digit)
    return num/div

num=float(input("Enter an item from data : \t"))
if num in data:
  print("Calculating  min-max normalization")
  print("After doing min-max normalization :",minMaxNor(num,data))
  print("\nCalculating z-score normalization")
  print("After doing z-score normalization : \t", zNor(num,statistics.mean(data),statistics.stdev(data)))
  print("\nCalculating Modified z-score normalization")
  df = pd.DataFrame(data)
  print("After doing Modified z-score normalization : \t", zNorMAD(num,statistics.mean(data),df.mad()))
  print("\nCalculating decimal scaling normalization")
  print("After doing decimal scaling normalization : \t", decNor(num,max(data)))
else:
  print("Item entered is not present!!")
  print("Can't perform normalization on the selected item!")

"""**DATA VISUALIZATION**"""

#finding no. of movies who got a particular vote
plt.figure(figsize=(20,10))
sns.countplot(x='vote_count',data=df,palette="pastel")
plt.xticks(fontsize=9)
plt.show()

plt.figure(figsize=(20,10))
sns.countplot(x='release_date',data=df,palette="pastel")
plt.xticks(fontsize=9)
plt.show()